//
//  main.cpp
//  GoogleCodeJam_QualificationRound2014_MinesweeperMaster
//
//  Created by Youngduke Koh on 3/16/15.
//  Copyright (c) 2015 Youngduke Koh. All rights reserved.
//

#include <iostream>

using namespace std;

void printOneCell(int r, int c) {
    int i, j;
    
    for (i = 0; i < r; i++) {
        for (j = 0; j < c; j++) {
            if (i == 0 && j == 0) cout << "c";
            else cout << "*";
        }
        cout << "\n";
    }
}

void printOneRow(int c, int b) {
    int j;
    
    for (j = 0; j < c; j++) {
        if (j == 0) cout << "c";
        else if (j < b) cout << ".";
        else cout << "*";
    }
    cout << "\n";
}

void printOneColumn(int r, int b) {
    int i;
    
    for (i = 0; i < r; i++) {
        if (i == 0) cout << "c";
        else if (i < b) cout << ".";
        else cout << "*";
        cout << "\n";
    }
}

void printCells(int r, int c, int lines, int items, int beforeItems, int lastItems) {
    int i, j;
    
    for (i = 0; i < r; i++) {
        for (j = 0; j < c; j++) {
            if (i == 0 && j == 0) cout << "c";
            else if (i < lines - 1 && j < items) cout << ".";
            else if (i == lines - 1 && j < beforeItems) cout << ".";
            else if (i == lines && j < lastItems) cout << ".";
            else cout << "*";
        }
        cout << "\n";
    }
}

void solve(int r, int c, int b) {
    int i, j, k;
    
    if (b == 1) return printOneCell(r, c);
    if (r == 1) return printOneRow(c, b);
    if (c == 1) return printOneColumn(r, b);
    if ((r == 2 || c == 2) && (b % 2)) {
        cout << "Impossible\n";
        return;
    }
    
    for (i = c; i > 1; i--) {
        j = b / i;
        k = b % i;
        if (j > 1 && j <= r && k == 0) return printCells(r, c, j, i, i, 0);
        if (j > 1 && j < r && k > 1) return printCells(r, c, j, i, i, k);
        if (j > 2 && i > 2 && j < r && k == 1) return printCells(r, c, j, i, i - 1, 2);
    }
    
    cout << "Impossible\n";
}

int main(int argc, const char * argv[]) {
    int T, i, R, C, M;
    
    cin >> T;
    i = 0;
    while (i < T) {
        i++;
        cin >> R >> C >> M;
        cout << "Case #" << i << ":\n";
        solve(R, C, R * C - M);
    }
    
    return 0;
}

/*
#include <iostream>
#include <vector>

using namespace std;

int **board = NULL;

int idx=0;

void display(int r, int c)
{
    cout << "Case #" << idx+1 << ":\n";
    for(int i=0;i<r;++i)
    {
        for(int j=0;j<c;++j)
        {
            if(board[i][j]==0)
            {
                cout<<"c";            }
            if(board[i][j]==1)
            {
                cout<<"*";
            }
            if(board[i][j]==2)
            {
                cout<<".";
            }
        }
        cout<<endl;
    }
}

int main()
{
    int nCases=0;
    cin >> nCases;
    
    for(;idx<nCases;++idx)
    {
        int r, c, m, n;
        cin >>r>>c>>m;
        
        n = r*c-m;
        
        board = new int *[r];
        for(int j=0;j<r;++j)
        {
            board[j] = new int[c];
        }
        
        if(n==1)
        {
            //output<<"Case 1\n";
            for(int i = 0;i<r;++i)
            {
                for(int j=0;j<c;++j)
                {
                    board[i][j]=1; //mine
                }
            }
            board[0][0]=0; //click
            display(r, c);
            continue;
        }
        
        if(r==1)
        {
            //output<<"Case 2\n";
            int tNM = n; //temporary non mine counter
            for(int i =0;i<c;++i)
            {
                if(tNM==0)
                {
                    board[0][i]=1; //mine
                }
                else
                {
                    board[0][i]=2;
                    tNM--;    //non-mine
                }
            }
            board[0][0]=0;   //click
            display(r, c);
            continue;
        }
        if(c==1)
        {
            //output<<"Case 3\n";
            int tNM = n; //temporary non mine counter
            for(int i =0;i<r;++i)
            {
                if(tNM==0)
                {
                    board[i][0]=1; //mine
                }
                else
                {
                    board[i][0]=2;
                    tNM--;    //non-mine
                }
            }
            board[0][0]=0;   //click
            display(r, c);
            continue;
        }
        
        if((n%2==0 && n<4) || (n%2==1 && ((r<3||c<3)||n<9)))
        {
            cout<<"Case #"<<idx+1<<": \nImpossible\n";
            continue;
        }
        
        if(n%2==0 && ((n/c)<2))
        {
            //output<<"Case 4\n";
            for(int i = 0;i<2;++i)
            {
                for(int j =0; j<n/2;++j)
                {
                    board[i][j]=2;
                }
            }
            
            //rest are mines
            for(int i=0;i<r;++i)
            {
                for(int j =0;j<c;++j)
                {
                    if(board[i][j]!=2)
                        board[i][j]=1;
                }
            }
            board[0][0]=0; //click
            display(r, c);
            continue;
        }
        
        if(n%2==1 && ((n/c<2) ||((n-2*c)<3)))
        {
            //output<<"Case 5\n";
            int tNM = n;
            for(int i = 0;i<2;++i)
            {
                for(int j =0; j<(n-3)/2;++j)
                {
                    board[i][j]=2;
                }
            }
            
            board[2][0] = 2;
            board[2][1] = 2;
            board[2][2] = 2; //the three non mines
            
            //rest are mines
            for(int i=0;i<r;++i)
            {
                for(int j =0;j<c;++j)
                {
                    if(board[i][j]!=2)
                        board[i][j]=1;
                }
            }
            board[0][0]=0; //click
            display(r, c);
            continue;
        }
        
        //else the last case:
        int tNM = n;
        for(int i =0;i<r;++i)
        {
            //output<<"Case 6\n";
            for(int j =0;j<c;++j)
            {
                if(tNM!=0)
                {
                    board[i][j]=2;
                    tNM--;
                }
                else
                    board[i][j]=1;
            }
        }
        if(n%c==1)
        {
            board[n/c-1][c-1] = 1;
            board[n/c][1] = 2;
        }
        board[0][0] = 0; 
        display(r, c);
    }
}
*/

/*
5
5 5 23
3 1 1
2 2 1
4 7 3
10 10 82
=====
Case #1:
Impossible
Case #2:
c
.
*
Case #3:
Impossible
Case #4:
......*
.c....*
.......
..*....
Case #5:
**********
**********
**********
****....**
***.....**
***.c...**
***....***
**********
**********
**********
*/
